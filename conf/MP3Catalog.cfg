#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys, os
import logging

ScriptFullName   = os.path.abspath(sys.argv[0])
ScriptAbsPath    = os.path.dirname(ScriptFullName)
dataDirectory    = os.path.abspath(ScriptAbsPath + '\..\data')

MP3baseDIR    = 'd:\MyData\MP3'

excelFname    = dataDirectory + '\MP3_Master_justForTEST'
excelFname    = dataDirectory + '\MP3_Master_justForTEST_Short_10'
excelFname    = dataDirectory + '\MP3_Master_justForTEST_Short_02'
excelFname    = dataDirectory + '\MP3_Master_2013-11-27'
excelFname    = dataDirectory + '\MP3_Master_justForTEST_Short_34'
excelFname    = dataDirectory + '\MP3_Master_2013-12-26'
excelFname    = dataDirectory + '\MP3_Master_TEST'
excelFname    = dataDirectory + '\MP3_Master_2014-01-13c'

ACTION        = 'MERGE'
ACTION        = 'EXTRACT'

# #########################################################################
# # Global Variables
# #########################################################################
MainSection = {

    'START EXCEL COLUMN' : 'B',                         # Prima colonna valida
    'COLUMNS NAME ROW'   : 5,                            # riga che contiene i nomi delle colonne
    'FIRST SONG ROW'     : 8,                            # riga dove iniziano i dati
    # 'LAST SONG ROW'      : 1000,                            # riga dove finiscono i dati
    # 'LAST SONG ROW'      : 50,                            # riga dove finiscono i dati
    'LAST SONG ROW'      : 999999,                            # riga dove finiscono i dati
    'ACTION'             : ACTION,

    'excelInputFile'    : excelFname + '.xlsm',
    'excelOutputFile'   : excelFname + '_' + ACTION + 'ed.xls',

    'Nomi Colonne Primarie'  : ['Type', 'Author Name', 'Album Name', 'Song Name'],
    'Nomi Colonne Attributi' : [
                                'Punteggio',
                                'Analizzata',
                                'Recomended',
                                'Loreto',
                                'Buona',
                                'Soft',
                                'Vivace',
                                'Molto Viv',
                                'Camera',
                                'Car',
                                'Lenta',
                                'Country',
                                'Strumentale',
                                'Classica',
                                'Lirica',
                                'Live',
                                'Discreta',
                                'Undefined',
                                'Avoid it', 'Confusionaria', 'Song Size',
                                ],

}



# #########################################################################
# # Parametri utilizzati per il EXTRACT
# #########################################################################
ExtractSection = {
    'MP3 Destination Directory'     : 'E:\FFFF\MP3',
    'Punteggi'                      : [ 21, 1000],
    'Punteggi'                      : [ 768, 9000],
    'Recomended - Mandatory'        : True,                     # True:Prima ti tutto le RECOMENDED
    'Extraction Order'              : 'firstMAX - restRANDOM',  # firstMAX indica che prima vanno considerate tutte quelle con il punteggio più elevato e poi il resto
    'PrefixSong'                    : True,                     # Mette <N.Cognome-> dell'autore prima del titolo della canzone All'interno del folder Type

        # I valori di questo dictionary sono modificati dal codice della funzione calcola()
    'PERCENT_X' : {    # Percentuale di canzoni richiesta per ogni tipologia
        'Natale'            :  0   ,
        'Bambini'           : 100   ,
        'Italiani'          :  0   ,
        'Stranieri'         :  0   ,
        'Themes'            :  0   ,
        'Classica'          :  0   ,
        'Popolari'          :  0   ,
        'Country'           :  0   ,
        'Chitarra'          :  0   ,
        'TestForUniCode'    :100   ,
    },

    # I valori di questo dictionary sono modificati dal codice della funzione calcola()
    'PERCENT' : {    # Percentuale di canzoni richiesta per ogni tipologia
        'Natale'     :  0   ,
        'Bambini'    :  0   ,
        'Italiani'   : 70   ,
        'Stranieri'  : 20   ,
        'Themes'     :  0   ,
        'Classica'   :  0   ,
        'Popolari'   :  5   ,
        'Country'    : 10   ,
        'Chitarra'   :  5   ,
        'TestForUniCode'   :  100   ,
    },

        # Uno qualsiasi dei seguenti vlori porta alla chiusura dell'estrazione
    'MAX_SONGS'         : 50000,                # numero Massimo di canzoni da estrarre
    'FILL_DISK'         : True,                 # Controlla anche il riempimento del disco
    'MAX_OUT_DIR_SIZE'  : 2500000000,           # Massimo SIZE in bytes da occupare
    'MAX_OUT_DIR_SIZE'  : 4001898496,           # 3.908.104.000 --> Usb da 4GB
    'MAX_OUT_DIR_SIZE'  : 1052774400,           # 1.028.100.000 ---> SD da 1GB
    'MAX_OUT_DIR_SIZE'  : 3000000000,           # 3.000.000.000 --> Scheda micro-SD da 4GB sul cellulare. Lasciamo un pò di spazio libero
    'MAX_OUT_DIR_SIZE'  : 963232000,            # 1.000.000.000 --> Lettore MP3 GoGear
    'MAX_OUT_DIR_SIZE'  : 671088640,            # CD 640*1024*1024
    'MAX_OUT_DIR_SIZE'  : 3997732864,           # 3.908.036.000 --> Usb da 4GB (Fabio Ottaviani card)
    'MAX_OUT_DIR_SIZE'  : 2013888512,           # 1.966.688.000 ---> SD da 2GB
    'MAX_OUT_DIR_SIZE'  : 736100352,            # CD-RW 702*1024*1024 --> CD-RW bianchi di Banca
    'MAX_OUT_DIR_SIZE'  : 15990931456,          # 16GBytes microSD - da verificare
    'MAX_OUT_DIR_SIZE'  : 7995465728,           # 8GBytes microSD - da verificare


    # 'MAX_AUTHORS_SONGS' : 10,                   # Massimo numero di canzoni per ogni autore
    'MAX_AUTHORS_SONGS' : {
                'DEFAULT'               : 10,                   # Massimo numero di canzoni di DEFAULT
                'New Age'               : 10,                   # Massimo numero di canzoni
                'Deb Talan'             : 20,                   # Massimo numero di canzoni
                'Graziani Ivan'         : 20,                   # Massimo numero di canzoni
                'Barbarossa Luca'       : 20,                   # Massimo numero di canzoni
                'Guccini Francesco'     : 50,                   # Massimo numero di canzoni
                'De Gregori Francesco'  : 30,                   # Massimo numero di canzoni
                'Vecchioni Roberto'     : 30,                   # Massimo numero di canzoni
    },


    'Prefissi particolari' : {
        'Santo & Jonny'                         :   'S&J',
        'Banco del Mutuo Soccorso'              :   'BMS',
        'Audio 2'                               :   'Audio2',
        'Cugini Di Campagna'                    :   'CdC',
        'DJ Francesco'                          :   'DjFranc',
        'Generazione 19xx'                      :   'Gen.19xx',
        'I favolosi anni 60'                    :   'Anni60',
        'Italia del rock'                       :   'ItRock',
        'Le Orme'                               :   'LeOrme',
        'Loreto & Michela'                      :   'L&M',
        'Luna POP'                              :   'LunaPop',
        'Studio 3'                              :   'Studio3',
        'Wess & Dori Ghezzi'                    :   'W&DG',
        'Earth wind & fire'                     :   'EW&Fire',
        'Karl Perazzo and Raul Rekow'           :   'KPRR',
        'Music from the ANDEs'                  :   'Ande',
        'Miranda Lee Richards'                  :   'M.L.Richards',
        'Original Motion Picture SoundTrack'    :   'OMPS',
        'Piano Love songs'                      :   'Piano',
        'Red Hot Chili Peppers'                 :   'RHChiliPeppers',
        'Simon and Garfunkel'                   :   'S&Gfk',
        'The Corrs'                             :   'Corrs',
        'The Cranberries'                       :   'Cranberries',
        'The Feeling'                           :   'Feeling',
        'The Nothing HillBillies'               :   'N.HillBillies',
        'The Weepies'                           :   'Weepies',
        'World Cafe Next'                       :   'WorldCafe',
        "Canzoni sotto l'albero"                :   "Natale",
        "Carlos Fanelli & CO"                   :   "C.Fanelli",
        "Country and Western"                   :   "Country&W",
        "New Age"                               :   "NewAge",
    },


}


# #########################################################################
# # Parametri utilizzati per il MERGE
# #########################################################################
MergeSection = {
    'dir to scan' : [
                        MP3baseDIR + "\Bambini",
                        MP3baseDIR + '\Chitarra',
                        MP3baseDIR + '\Classica',
                        MP3baseDIR + '\Country',
                        MP3baseDIR + '\Italiani',
                        MP3baseDIR + '\Natale',
                        MP3baseDIR + '\Popolari',
                        MP3baseDIR + '\Stranieri',
                        MP3baseDIR + '\Themes',
                    ],

    'xdir to scan' : [
                        MP3baseDIR + "\Bambini\Canzoni sotto l'albero",
                        MP3baseDIR + "\TestForUniCode",
                    ],

}



# ###############################################################
# - calcola():
# ###############################################################
def calcola():
    totPercent = 0
    for key, val in ExtractSection['PERCENT'].items():
        totPercent += val


    if totPercent != 100:
        print
        print "Totale percentuali [%d]" % (totPercent)
        print "Verrà fatto il ricalcolo in proporzione per portarle a 100%"
        print


    newTotal = 0
    for key, reqPercent in ExtractSection['PERCENT'].items():
            #  Allineamento a 100 delle percentuali   [ x : 70 = 100 : TotalPercent ]
        calcPercent = (reqPercent * 100.0) /totPercent
        newTotal += calcPercent

            #  calcolo del size corrispondente alla percentuale [ x : MAX_OUT_DIR_SIZE = perc : 100 ]

            # L'entry della LIST cambia: KEY, %req, %calcolata, %maxBytes, copiedBytes, %reale
        ExtractSection['PERCENT'][key]      = [reqPercent, calcPercent, (calcPercent * ExtractSection['MAX_OUT_DIR_SIZE']) / 100, 0, 0]

            # Creazione di entrate/enum che verranno utilizzate dal programma per conoscere i vari field
        ExtractSection['FIELD_PERCENT_REQ_PERC']            = 0
        ExtractSection['FIELD_PERCENT_CALC_PERC']           = 1
        ExtractSection['FIELD_PERCENT_MAXBYTES']            = 2
        ExtractSection['FIELD_PERCENT_COPIEDBYTES']         = 3
        ExtractSection['FIELD_PERCENT_REAL_PERC']           = 4



# ###############################################################
# - verifica(): [^0-9a-zA-Z '&éè-()]
# ###############################################################
def verifica(Start=False):

    totalCopiedBytes=0

            # ---------------------------------------------------------------------
            # - PreCalcolo della percentuale reale in base ai bytes scritti
            # - Viene eseguita alla fine del programma
            # ---------------------------------------------------------------------
    if Start == False:
        for key, val in ExtractSection['PERCENT'].items():
            (reqPercent, calcPercent, MaxBytes, copiedBytes, realPercent) = val
            totalCopiedBytes    += copiedBytes

        for key, val in ExtractSection['PERCENT'].items():
            (reqPercent, calcPercent, MaxBytes, copiedBytes, realPercent) = val
            if totalCopiedBytes > 0:
                real = (copiedBytes * 100.0)/totalCopiedBytes                #  Allineamento a 100 delle percentuali   [ x : copiedBytes = 100 : TotalCopiedBytes ]
            else:
                real = 0

            ExtractSection['PERCENT'][key]      = [reqPercent, calcPercent, MaxBytes, copiedBytes, real]


    print "\n"*2
    print "Percentuali e Bytes in base alla categoria"
    totalBytes=0
    print "%-15s : %10s %10s %15s %15s %15s" % ('songType', '[% REQ]', '[% Calc]', '[Max MBytes]', '[Copied Bytes]', '[REAL %]' )
    print ""*50

    totalCopiedBytes, totalBytes    = 0, 0
    totalCalcPercent, totalReqPercent, totalRealPercent        = 0, 0, 0
    for key, val in ExtractSection['PERCENT'].items():
        (reqPercent, calcPercent, MaxBytes, copiedBytes, realPercent) = val
        print "%-15s : %10.2f %10.2f %15d %15d %15.2f" % (key, reqPercent, calcPercent, MaxBytes, copiedBytes, realPercent)
        totalBytes                  += MaxBytes
        totalCopiedBytes            += copiedBytes
        totalReqPercent             += reqPercent
        totalCalcPercent            += calcPercent
        totalRealPercent            += realPercent

    print ""*50
    print "%-15s : %10.2f %10.2f %15d %15d %15.2f" % ("Totale", totalReqPercent, totalCalcPercent, totalBytes, totalCopiedBytes, totalRealPercent)
    print "                %30.2f GB %15.2f GB" % (totalBytes/1024.0/1024/1024, totalCopiedBytes/1024.0/1024/1024)
    print


# Verifica e display della percentuale
if ACTION == 'EXTRACT':
    calcola()
    verifica(Start=True)

if __name__ == "__main__":
    pass
